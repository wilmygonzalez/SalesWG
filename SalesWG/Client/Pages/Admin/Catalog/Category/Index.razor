@page "/"
@using SalesWG.Client.Shared.Components
@using SalesWG.Shared.Admin.Models.Catalog.Category
@using SalesWG.Shared.Helpers
@using SalesWG.Shared.Models

@inject IDialogService _dialogService
@inject HttpClient _httpClient

<MudButton OnClick="OpenAddDialog" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AddBox" Color="Color.Info"
        Class="mb-3">
        Add Category
</MudButton>

<MudTable Elevation="3" Items="@categories.Data" Hover="true" Breakpoint="Breakpoint.Xs" HorizontalScrollbar="true" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Categories</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Parent Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Parent Name">@context.ParentCategory?.Name</MudTd>
        <MudTd DataLabel="Actions">
            <MudTooltip Text="Edit">
                <MudIconButton OnClick="@(() => OpenEditDialog(context.Id))" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Medium" />
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton OnClick="@(() => OpenDeleteDialog(context.Id))" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
            </MudTooltip>
       </MudTd>
    </RowTemplate>
</MudTable>

@code {
    DialogOptions options = new DialogOptions() { CloseButton = true };

    private PagedResponse<CategoryResponse> categories = new();
    private PagedRequest pagedRequest = new PagedRequest { PageIndex = 0, PageSize = 10};
    private string searchString;
    private bool sortByNameLength;

    protected override async Task OnInitializedAsync()
    {
        await GetAllCategories();
    }

    private async Task OpenAddDialog()
    {
        var dialog = _dialogService.Show<Add>("New Category", options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await GetAllCategories();
        }
    }

    private async Task OpenEditDialog(int id)
    {
        var response = await _httpClient.GetFromJsonAsync<AppResponse<CategoryResponse>>($"api/admin/category/GetCategoryById/{id}");
        var request = new AddEditCategoryRequest
        {
            Id = id,
            Name = response.Data.Name,
            Description = response.Data.Description,
            ParentCategory = response.Data.ParentCategory
        };

        var parameters = new DialogParameters();
        parameters.Add("Category", request);

        var dialog = _dialogService.Show<Edit>($"Edit Category #{id}", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await GetAllCategories();
        }
    }

    private async Task OpenDeleteDialog(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure to want to delete this category?");
        parameters.Add("ButtonText", "Delete Category");
        parameters.Add("Color", Color.Error);

        var dialog = _dialogService.Show<Dialog>($"Delete Category #{id}", parameters, options);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _httpClient.DeleteAsync($"api/admin/category/DeleteCategory/{id}");
            await GetAllCategories();
        }
    }

    private async Task GetAllCategories()
    {
        var uri = $"api/admin/category/GetAllCategories?PageIndex={pagedRequest.PageIndex}&PageSize={pagedRequest.PageSize}&SearchString={pagedRequest.SearchString}";
        var response = await _httpClient.GetFromJsonAsync<AppResponse<PagedResponse<CategoryResponse>>>(uri);
        categories = response.Data;
    }

}